"""
author: Sunil
description:
Validate demo-app api - GET /api/auth/token	, GET/POST /api/users, GET/PUT - /api/users/{username}
usage:
pytest test_basic.py
or
python3 -m pytest test_basic.py
"""

import sys
import logging
import os
sys.path.append(os.path.abspath(os.path.join(__file__,  "..", "..", "..")))

from lib.log import log
from lib.log import logger
from lib.api.demo_app.model import DemoApp
from lib.api.api_service import APIService
logger.setLevel(logging.DEBUG)

# Generic service
# Can be used with multiple users or multiple endpoints
# APIServices can be extended and used for other apps also in future
api_service = APIService()


# Create test user by passing Fname, Lname and phone details
# Username since not passed is uniquely generated by DemoApp class. Test password as defined in resources is set
# Not passing username here as delete is not available from API to delete any existing users

@log
def test_create():
    # user-1 test Data for basic test
    firstname = 'BasicTestFN'
    lastname = 'BasicTestLN'
    phone = '+358-111-111-111'
    api_user1 = DemoApp(firstname=firstname, lastname=lastname, phone=phone)
    """ test case to create a new user and verify the header and response"""
    logger.debug(f"Creating new user with username {api_user1.username} and password {api_user1.password}")
    create_response = api_service.create(api_user1)
    logger.debug(f"Response payload: {create_response.json()}. Status code {create_response.status_code}")
    assert create_response.json()['message'] == 'Created'
    assert create_response.json()['status'] == 'SUCCESS'
    assert int(create_response.status_code) == 201
    assert create_response.headers['Content-Type'] == 'application/json'

@log
def test_login():
    # user-2. Using all defaults from resources/demo_app
    api_user2 = DemoApp()
    api_service.create(api_user2)
    auth_response = api_service.login(api_user2, username=api_user2.username, password=api_user2.password)
    logger.debug(f"Response payload: {auth_response.json()}. Status code {auth_response.status_code}")
    assert int(auth_response.status_code) == 200
    assert auth_response.json()['status'] == 'SUCCESS'
    assert auth_response.json()['token'] is not None



@log
def test_get_user():
    # user-3. Test get details of user
    firstname = 'UserThreeFN'
    lastname = 'UserThreeLN'
    phone = '+358-333-333-333'
    api_user3 = DemoApp(firstname=firstname, lastname=lastname, phone=phone)
    api_service.create(api_user3)
    api_service.login(api_user3)
    get_user_response = api_service.get(api_user3, username=api_user3.username)
    logger.debug(f"get user response is {get_user_response.json()}")
    assert int(get_user_response.status_code) == 200
    assert get_user_response.json()['status'] == 'SUCCESS'
    assert get_user_response.json()['message'] == 'retrieval succesful'
    assert get_user_response.json()['payload']['firstname'] == api_user3.firstname
    assert get_user_response.json()['payload']['lastname'] == api_user3.lastname
    assert get_user_response.json()['payload']['phone'] == api_user3.phone



# Test to get all users present
# The app allows to get all the users present in DB from token of any valid user
@log
def test_get_all_users():
    api_user4 = DemoApp()
    api_service.create(api_user4)
    api_service.login(api_user4)
    get_all_user_response = api_service.get_all(api_user4)
    logger.debug(f"get user response is {get_all_user_response.json()}")
    assert int(get_all_user_response.status_code) == 200
    assert get_all_user_response.json()['status'] == 'SUCCESS'
    assert api_user4.username in get_all_user_response.json()['payload']


# Test PUT method of the demo-app api.
# This API allows to update the existing user
# demo-app allows to PUT the changes using token of any other token
# This should not be allowed and needs to be fixed in demo-app
# Only the token from the authenticated user, those user should only be allowed to modify
# i.e api_user1 token can be used to PUT the changes for api_user2 which is a bug in demo-app

@log
def test_update_user():
    # user-5. Test get details of user
    firstname = 'UserFiveFN'
    lastname = 'UserFiveLN'
    phone = '+358-555-555-555'
    api_user5 = DemoApp(firstname=firstname, lastname=lastname, phone=phone)
    update_firstname = 'UpdatedUserFiveFN'
    update_lastname = 'UpdateUserFiveLN'
    update_phone = '+91-555-555-555'
    api_service.create(api_user5)
    api_service.login(api_user5)
    api_user5.update_new_details(firstname=update_firstname, lastname=update_lastname, phone=update_phone)
    update_response = api_service.update(api_user5, update_payload=api_user5.update_payload)
    logger.debug(f"update response is {update_response.json()}")
    assert update_response.json()['message'] == 'Updated'
    assert update_response.json()['status'] == 'SUCCESS'
    assert int(update_response.status_code) == 201

    get_updated_user_response = api_service.get(api_user5, username=api_user5.username)
    logger.debug(f"get response after update {get_updated_user_response.json()}")
    assert get_updated_user_response.json()['payload']['firstname'] == update_firstname
    assert get_updated_user_response.json()['payload']['lastname'] == update_lastname
    assert get_updated_user_response.json()['payload']['phone'] == update_phone
